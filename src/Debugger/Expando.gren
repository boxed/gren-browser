module Debugger.Expando exposing
  ( Expando
  , Msg
  , init
  , merge
  , update
  , view
  )


import Dict exposing (Dict)
import Gren.Kernel.Debugger
import Html exposing (Html, div, span, text)
import Html.Attributes exposing (class, style)
import Html.Events exposing (onClick)
import Json.Decode as Json



-- MODEL


type Expando
  = S String
  | Primitive String
  | Sequence SeqType Bool (Array Expando)
  | Dictionary Bool (Array { key : Expando, value : Expando })
  | Record Bool (Dict String Expando)
  | Constructor (Maybe String) Bool (Array Expando)


type SeqType
  = ArraySeq
  | SetSeq


seqTypeToString : Int -> SeqType -> String
seqTypeToString n seqType =
  case seqType of
    SetSeq ->
      "Set(" ++ String.fromInt n ++ ")"

    ArraySeq ->
      "Array(" ++ String.fromInt n ++ ")"



-- INITIALIZE


init : a -> Expando
init value =
  initHelp True (Gren.Kernel.Debugger.init value)


initHelp : Bool -> Expando -> Expando
initHelp isOuter expando =
  case expando of
    S _ ->
      expando

    Primitive _ ->
      expando

    Sequence seqType isClosed items ->
      if isOuter then
        Sequence seqType False (Array.map (initHelp False) items)

      else if Array.length items <= 8 then
        Sequence seqType False items

      else
        expando

    Dictionary isClosed keyValuePairs ->
      if isOuter then
        Dictionary False (Array.map (\{ key, value } -> { key = key, value = initHelp False value }) keyValuePairs)

      else if Array.length keyValuePairs <= 8 then
        Dictionary False keyValuePairs

      else
        expando

    Record isClosed entries ->
      if isOuter then
        Record False (Dict.map (\_ v -> initHelp False v) entries)

      else if Dict.size entries <= 4 then
        Record False entries

      else
        expando

    Constructor maybeName isClosed args ->
      if isOuter then
        Constructor maybeName False (Array.map (initHelp False) args)

      else if Array.length args <= 4 then
        Constructor maybeName False args

      else
        expando



-- PRESERVE OLD EXPANDO STATE (open/closed)


merge : a -> Expando -> Expando
merge value expando =
  mergeHelp expando (Gren.Kernel.Debugger.init value)


mergeHelp : Expando -> Expando -> Expando
mergeHelp old new =
  case { l = old, r = new } of
    { r = S _ } ->
      new

    { r = Primitive _ } ->
      new

    { l = Sequence _ isClosed oldValues, r = Sequence seqType _ newValues } ->
      Sequence seqType isClosed (mergeArrayHelp oldValues newValues)

    { l = Dictionary isClosed _, r = Dictionary _ keyValuePairs } ->
      Dictionary isClosed keyValuePairs

    { l = Record isClosed oldDict, r = Record _ newDict } ->
      Record isClosed <| Dict.map (mergeDictHelp oldDict) newDict

    { l = Constructor _ isClosed oldValues, r = Constructor maybeName _ newValues } ->
      Constructor maybeName isClosed (mergeArrayHelp oldValues newValues)

    _ ->
      new


mergeArrayHelp : Array Expando -> Array Expando -> Array Expando
mergeArrayHelp olds news =
  case { l = Array.popFirst olds, r = Array.popFirst news } of
    { l = Nothing, r = _ } ->
      news

    { l = _, r = Nothing } ->
      news

    { l = Just { first = x, rest = xs }, r = Just { first = y, rest = ys } } ->
      Array.pushFirst (mergeHelp x y) (mergeArrayHelp xs ys)


mergeDictHelp : Dict String Expando -> String -> Expando -> Expando
mergeDictHelp oldDict key value =
  case Dict.get key oldDict of
    Nothing ->
      value

    Just oldValue ->
      mergeHelp oldValue value



-- UPDATE


type Msg
  = Toggle
  | Index Redirect Int Msg
  | Field String Msg


type Redirect
  = None
  | Key
  | Value


update : Msg -> Expando -> Expando
update msg value =
  case value of
    S _ ->
      -- Debug.crash "nothing changes a primitive"
      value

    Primitive _ ->
      -- Debug.crash "nothing changes a primitive"
      value

    Sequence seqType isClosed valueArray ->
      case msg of
        Toggle ->
          Sequence seqType (not isClosed) valueArray

        Index None index subMsg ->
          Sequence seqType isClosed <| updateIndex index (update subMsg) valueArray

        Index _ _ _ ->
          -- Debug.crash "no redirected indexes on sequences"
          value

        Field _ _ ->
          -- Debug.crash "no field on sequences"
          value

    Dictionary isClosed keyValuePairs ->
      case msg of
        Toggle ->
          Dictionary (not isClosed) keyValuePairs

        Index redirect index subMsg ->
          case redirect of
            None ->
              -- Debug.crash "must have redirect for dictionaries"
              value

            Key ->
              Dictionary isClosed <|
                updateIndex index (\{ key, value = v } -> { key = update subMsg key, value = v }) keyValuePairs

            Value ->
              Dictionary isClosed <|
                updateIndex index (\{ key, value = v } -> { key = key, value = update subMsg v }) keyValuePairs

        Field _ _ ->
          -- Debug.crash "no field for dictionaries"
          value

    Record isClosed valueDict ->
      case msg of
        Toggle ->
          Record (not isClosed) valueDict

        Index _ _ _ ->
          -- Debug.crash "no index for records"
          value

        Field field subMsg ->
          Record isClosed (Dict.update field (updateField subMsg) valueDict)

    Constructor maybeName isClosed valueArray ->
      case msg of
        Toggle ->
          Constructor maybeName (not isClosed) valueArray

        Index None index subMsg ->
          Constructor maybeName isClosed <|
            updateIndex index (update subMsg) valueArray

        Index _ _ _ ->
          -- Debug.crash "no redirected indexes on sequences"
          value

        Field _ _ ->
          -- Debug.crash "no field for constructors"
          value


updateIndex : Int -> (a -> a) -> Array a -> Array a
updateIndex n func array =
  case Array.get n array of
    Nothing ->
      array

    Just x ->
      Array.set n (func x) array


updateField : Msg -> Maybe Expando -> Maybe Expando
updateField msg maybeExpando =
  case maybeExpando of
    Nothing ->
      -- Debug.crash "key does not exist"
      maybeExpando

    Just expando ->
      Just (update msg expando)



-- VIEW


view : Maybe String -> Expando -> Html Msg
view maybeKey expando =
  case expando of
    S stringRep ->
      div (leftPad maybeKey) (lineStarter maybeKey Nothing [ span [ red ] [ text stringRep ] ])

    Primitive stringRep ->
      div (leftPad maybeKey) (lineStarter maybeKey Nothing [ span [ blue ] [ text stringRep ] ])

    Sequence seqType isClosed valueArray ->
      viewSequence maybeKey seqType isClosed valueArray

    Dictionary isClosed keyValuePairs ->
      viewDictionary maybeKey isClosed keyValuePairs

    Record isClosed valueDict ->
      viewRecord maybeKey isClosed valueDict

    Constructor maybeName isClosed valueArray ->
      viewConstructor maybeKey maybeName isClosed valueArray



-- VIEW SEQUENCE


viewSequence : Maybe String -> SeqType -> Bool -> Array Expando -> Html Msg
viewSequence maybeKey seqType isClosed valueArray =
  let
    starter = seqTypeToString (Array.length valueArray) seqType
  in
  div (leftPad maybeKey)
    [ div [ onClick Toggle ] (lineStarter maybeKey (Just isClosed) [ text starter ])
    , if isClosed then text "" else viewSequenceOpen valueArray
    ]


viewSequenceOpen : Array Expando -> Html Msg
viewSequenceOpen values =
  div [] (Array.indexedMap viewConstructorEntry values)



-- VIEW DICTIONARY


viewDictionary : Maybe String -> Bool -> Array { key : Expando, value : Expando } -> Html Msg
viewDictionary maybeKey isClosed keyValuePairs =
  let
    starter = "Dict(" ++ String.fromInt (Array.length keyValuePairs) ++ ")"
  in
  div (leftPad maybeKey)
    [ div [ onClick Toggle ] (lineStarter maybeKey (Just isClosed) [ text starter ])
    , if isClosed then text "" else viewDictionaryOpen keyValuePairs
    ]


viewDictionaryOpen : Array { key : Expando, value : Expando } -> Html Msg
viewDictionaryOpen keyValuePairs =
  div [] (Array.indexedMap viewDictionaryEntry keyValuePairs)


viewDictionaryEntry : Int -> { key : Expando, value : Expando } -> Html Msg
viewDictionaryEntry index { key, value } =
  case key of
    S stringRep ->
      Html.map (Index Value index) (view (Just stringRep) value)

    Primitive stringRep ->
      Html.map (Index Value index) (view (Just stringRep) value)

    _ ->
      div []
        [ Html.map (Index Key index) (view (Just "key") key)
        , Html.map (Index Value index) (view (Just "value") value)
        ]



-- VIEW RECORD


viewRecord : Maybe String -> Bool -> Dict String Expando -> Html Msg
viewRecord maybeKey isClosed record =
  let
    { start, middle, end } =
      if isClosed then
        { start = .nodes (viewTinyRecord record)
        , middle = text ""
        , end = text ""
        }
      else
        { start = [ text "{" ]
        , middle = viewRecordOpen record
        , end = div (leftPad (Just {})) [ text "}" ]
        }
  in
  div (leftPad maybeKey)
    [ div [ onClick Toggle ] (lineStarter maybeKey (Just isClosed) start)
    , middle
    , end
    ]


viewRecordOpen : Dict String Expando -> Html Msg
viewRecordOpen record =
  div [] (Array.map viewRecordEntry (Dict.toArray record))


viewRecordEntry : { key : String, value : Expando } -> Html Msg
viewRecordEntry { key = field, value } =
  Html.map (Field field) (view (Just field) value)



-- VIEW CONSTRUCTOR


viewConstructor : Maybe String -> Maybe String -> Bool -> Array Expando -> Html Msg
viewConstructor maybeKey maybeName isClosed valueArray =
  let
    tinyArgs = Array.map (.nodes << viewExtraTiny) valueArray

    description =
      case { maybeName = maybeName, vals = Array.popFirst tinyArgs } of
        { maybeName = Nothing, vals = Nothing } ->
            [ text "()" ]
        { maybeName = Nothing, vals = Just { first = x, rest = xs } } ->
            [text "( ", span [] x] ++ Array.foldr (\args rest -> [text ", ", span [] args] ++ rest) [ text " )" ] xs
        { maybeName = Just name, vals = Nothing } ->
            [ text name ]
        { maybeName = Just name, vals = Just { first = x, rest = xs } } ->
            [text (name ++ " "), span [] x] ++ Array.foldr (\args rest -> [text " ", span [] args] ++ rest) [] xs

    { maybeIsClosed, openHtml } =
        case valueArray of
          [] ->
            { maybeIsClosed = Nothing, openHtml = div [] [] }

          [ entry ] ->
            case entry of
              S _ ->
                { maybeIsClosed = Nothing, openHtml = div [] [] }

              Primitive _ ->
                { maybeIsClosed = Nothing, openHtml = div [] [] }

              Sequence _ _ subValueArray ->
                { maybeIsClosed = Just isClosed
                , openHtml =
                    if isClosed then
                        div [] []
                    else
                        Html.map (Index None 0) (viewSequenceOpen subValueArray)
                }

              Dictionary _ keyValuePairs ->
                { maybeIsClosed = Just isClosed
                , openHtml = if isClosed then div [] [] else
                    Html.map (Index None 0) (viewDictionaryOpen keyValuePairs)
                }

              Record _ record ->
                  { maybeIsClosed = Just isClosed
                  , openHtml = if isClosed then div [] [] else
                      Html.map (Index None 0) (viewRecordOpen record)
                  }

              Constructor _ _ subValueArray ->
                { maybeIsClosed = Just isClosed
                , openHtml =
                  if isClosed then
                    div [] []
                  else
                    Html.map (Index None 0) (viewConstructorOpen subValueArray)
                }

          _ ->
            { maybeIsClosed = Just isClosed
            , openHtml = if isClosed then div [] [] else viewConstructorOpen valueArray
            }
  in
  div (leftPad maybeKey)
    [ div [ onClick Toggle ] (lineStarter maybeKey maybeIsClosed description)
    , openHtml
    ]


viewConstructorOpen : Array Expando -> Html Msg
viewConstructorOpen valueArray =
  div [] (Array.indexedMap viewConstructorEntry valueArray)


viewConstructorEntry : Int -> Expando -> Html Msg
viewConstructorEntry index value =
  Html.map (Index None index) (view (Just (String.fromInt index)) value)



-- VIEW TINY


viewTiny : Expando -> { index : Int, nodes : Array (Html msg) }
viewTiny value =
  case value of
    S stringRep ->
      let
        str = elideMiddle stringRep
      in
      { index = String.length str
      , nodes = [ span [ red ] [ text str ] ]
      }

    Primitive stringRep ->
      { index = String.length stringRep
      , nodes = [ span [ blue ] [ text stringRep ] ]
      }

    Sequence seqType _ valueArray ->
      viewTinyHelp <| seqTypeToString (Array.length valueArray) seqType

    Dictionary _ keyValuePairs ->
      viewTinyHelp <| "Dict(" ++ String.fromInt (Array.length keyValuePairs) ++ ")"

    Record _ record ->
      viewTinyRecord record

    Constructor maybeName _ [] ->
      viewTinyHelp <| Maybe.withDefault "{}" maybeName

    Constructor maybeName _ valueArray ->
      viewTinyHelp <|
        case maybeName of
          Nothing -> "Tuple(" ++ String.fromInt (Array.length valueArray) ++ ")"
          Just name -> name ++ " …"


viewTinyHelp : String -> { index : Int, nodes : Array (Html msg) }
viewTinyHelp str =
  { index = String.length str, nodes =  [ text str ] }


elideMiddle : String -> String
elideMiddle str =
  if String.length str <= 18
  then str
  else String.left 8 str ++ "..." ++ String.right 8 str



-- VIEW TINY RECORDS


viewTinyRecord : Dict String Expando -> { index : Int, nodes : Array (Html msg) }
viewTinyRecord record =
  if Dict.isEmpty record then
    { index = 2, nodes = [ text "{}" ] }
  else
    viewTinyRecordHelp 0 "{ " (Dict.toArray record)


viewTinyRecordHelp : Int -> String -> Array { key : String, value : Expando } -> { index : Int, nodes : Array (Html msg) }
viewTinyRecordHelp length starter entries =
  case Array.popFirst entries of
    Nothing ->
        { index = length + 2, nodes = [ text " }" ] }

    Just { first = { key = field, value }, rest } ->
      let
        fieldLen = String.length field
        { index = valueLen, nodes = valueHtmls } = viewExtraTiny value
        newLength = length + fieldLen + valueLen + 5
      in
      if newLength > 60 then
        { index = length + 4, nodes = [ text ", … }" ] }
      else
        let
          { index = finalLength, nodes = otherHtmls } = viewTinyRecordHelp newLength ", " rest
        in
        { index = finalLength
        , nodes = [text starter
          ,  span [ purple ] [ text field ]
          , text " = "
          , span [] valueHtmls
          ] ++ otherHtmls
        }


viewExtraTiny : Expando -> { index : Int, nodes : Array (Html msg) }
viewExtraTiny value =
  case value of
    Record _ record ->
      viewExtraTinyRecord 0 "{" (Dict.keys record)

    _ ->
      viewTiny value


viewExtraTinyRecord : Int -> String -> Array String -> { index : Int, nodes : Array (Html msg) }
viewExtraTinyRecord length starter entries =
  case Array.popFirst entries of
    Nothing ->
      { index = length + 1, nodes = [ text "}" ] }

    Just { first = field, rest } ->
      let
        nextLength = length + String.length field + 1
      in
      if nextLength > 18 then
        { index = length + 2, nodes = [ text "…}" ] }

      else
        let
          { index = finalLength, nodes = otherHtmls } = viewExtraTinyRecord nextLength "," rest
        in
        { index = finalLength
        , nodes = [text starter, span [ purple ] [ text field ]] ++ otherHtmls
        }



-- VIEW HELPERS


lineStarter : Maybe String -> Maybe Bool -> Array (Html msg) -> Array (Html msg)
lineStarter maybeKey maybeIsClosed description =
  let
    arrow =
      case maybeIsClosed of
        Nothing    -> makeArrow ""
        Just True  -> makeArrow "▸"
        Just False -> makeArrow "▾"
  in
  case maybeKey of
    Nothing ->
      Array.pushFirst arrow description

    Just key ->
      [arrow, span [ purple ] [ text key ], text " = "] ++ description


makeArrow : String -> Html msg
makeArrow arrow =
  span
    [ style "color" "#777"
    , style "padding-left" "2ch"
    , style "width" "2ch"
    , style "display" "inline-block"
    ]
    [ text arrow ]


leftPad : Maybe a -> Array (Html.Attribute msg)
leftPad maybeKey =
  case maybeKey of
    Nothing -> []
    Just _  -> [ style "padding-left" "4ch" ]


red : Html.Attribute msg
red =
  style "color" "rgb(196, 26, 22)"


blue : Html.Attribute msg
blue =
  style "color" "rgb(28, 0, 207)"


purple : Html.Attribute msg
purple =
  style "color" "rgb(136, 19, 145)"
