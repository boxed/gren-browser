module Debugger.Report exposing
    ( Change(..)
    , Report(..)
    , Status(..)
    , TagChanges
    , emptyTagChanges
    , evaluate
    , hasTagChanges
    )

-- REPORTS


type Report
    = CorruptHistory
    | VersionChanged String String
    | MessageChanged String String
    | SomethingChanged (Array Change)


type Change
    = AliasChange String
    | UnionChange String TagChanges


type alias TagChanges =
    { removed : Array String
    , changed : Array String
    , added : Array String
    , argsMatch : Bool
    }


emptyTagChanges : Bool -> TagChanges
emptyTagChanges argsMatch =
    TagChanges [] [] [] argsMatch


hasTagChanges : TagChanges -> Bool
hasTagChanges tagChanges =
    tagChanges == TagChanges [] [] [] True


type Status
    = Impossible
    | Risky
    | Fine


evaluate : Report -> Status
evaluate report =
    case report of
        CorruptHistory ->
            Impossible

        VersionChanged _ _ ->
            Impossible

        MessageChanged _ _ ->
            Impossible

        SomethingChanged changes ->
            worstCase Fine (Array.map evaluateChange changes)


worstCase : Status -> Array Status -> Status
worstCase status statusArray =
    case Array.popFirst statusArray of
        Nothing ->
            status

        Just { first = Impossible } ->
            Impossible

        Just { first = Risky, rest } ->
            worstCase Risky rest

        Just { first = Fine, rest } ->
            worstCase status rest


evaluateChange : Change -> Status
evaluateChange change =
    case change of
        AliasChange _ ->
            Impossible

        UnionChange _ { removed, changed, added, argsMatch } ->
            if not argsMatch || some changed || some removed then
                Impossible

            else if some added then
                Risky

            else
                Fine


some : Array a -> Bool
some list =
    not (Array.isEmpty list)
